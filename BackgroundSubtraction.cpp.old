#include "include/AGMM.h"
#include <getopt.h>
#include <opencv2/opencv.hpp>

#include <GLFW/glfw3.h>
#include "imGUI/imgui.h"
#include "imGUI/imgui_impl_glfw.h"
#include "imGUI/imgui_impl_opengl3.h"

using namespace cv;
using namespace std;

// play video frame by frame and show the result
int main(int argc, char **argv)
{

    // Setup GLFW
    glfwInit();

    // Setup window
    GLFWwindow *window = glfwCreateWindow(1280, 720, "Background Subtraction", NULL, NULL);

    // Setup Dear ImGui binding
    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO &io = ImGui::GetIO(); (void)io;

    // Setup Dear ImGui style
    ImGui::StyleColorsDark();

    // Setup Platform/Renderer bindings
    ImGui_ImplGlfw_InitForOpenGL(window, true);
    ImGui_ImplOpenGL3_Init("#version 330");

    // Our state
    bool show_demo_window = true;
    ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);

    if (argc < 2)
    {
        cout << "Usage: BackgroundSubtraction <video_path> [-s|--step]" << endl;
        return -1;
    }

    bool step = false;
    int c;

    static struct option long_options[] = {
        {"step", no_argument, NULL, 's'},
        {NULL, 0, NULL, 0}};

    while ((c = getopt_long(argc, argv, "s", long_options, NULL)) != -1)
    {
        switch (c)
        {
        case 's':
            step = true;
            break;
        default:
            break;
        }
    }

    AGMM agmm(argv[optind]);
    agmm.initializeModel();

    Mat frame, foregroundMask, foregroundMaskBGR, foregroundImage, combinedFrame, resizedFrame;

    VideoWriter videoWriter;
    bool isVideoWriterInitialized = false;

    while (!glfwWindowShouldClose(window))
    {
        glfwPollEvents();

        // Start the Dear ImGui frame
        ImGui_ImplOpenGL3_NewFrame();
        ImGui_ImplGlfw_NewFrame();
        ImGui::NewFrame();

        // Demo window
        if (show_demo_window)
            ImGui::ShowDemoWindow(&show_demo_window);

        // Rendering
        ImGui::Render();
        int display_w, display_h;
        glfwGetFramebufferSize(window, &display_w, &display_h);
        glViewport(0, 0, display_w, display_h);
        glClearColor(clear_color.x, clear_color.y, clear_color.z, clear_color.w);
        glClear(GL_COLOR_BUFFER_BIT);
        ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());

        glfwSwapBuffers(window);

        tie(foregroundMask, foregroundImage, frame) = agmm.processNextFrame();

        if (frame.empty())
        {
            break;
        }

        cvtColor(foregroundMask, foregroundMaskBGR, COLOR_GRAY2BGR);
        hconcat(frame, foregroundMaskBGR, combinedFrame);
        resize(combinedFrame, resizedFrame, Size(), 0.5, 0.5, INTER_LINEAR);

        if (!isVideoWriterInitialized && !step)
        {
            videoWriter.open("output.avi", VideoWriter::fourcc('x', '2', '6', '4'), 25, resizedFrame.size());
            isVideoWriterInitialized = true;
        }

        if (!step)
        {
            videoWriter.write(resizedFrame);
        }

        imshow("Background Subtraction", resizedFrame);

        int key = waitKey(step ? 0 : 30);
        if (key == 27)
        {
            break;
        }
        else if (step && key == 32)
        {
            continue;
        }
    }

    videoWriter.release();

    // Cleanup
    ImGui_ImplOpenGL3_Shutdown();
    ImGui_ImplGlfw_Shutdown();
    ImGui::DestroyContext();

    glfwDestroyWindow(window);
    glfwTerminate();

    return 0;
}